// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// cpp_euler_active
arma::mat cpp_euler_active(const double phi, const double theta, const double psi);
RcppExport SEXP tmatrix_cpp_euler_active(SEXP phiSEXP, SEXP thetaSEXP, SEXP psiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type psi(psiSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_euler_active(phi, theta, psi));
    return rcpp_result_gen;
END_RCPP
}
// cpp_euler_passive
arma::mat cpp_euler_passive(const double phi, const double theta, const double psi);
RcppExport SEXP tmatrix_cpp_euler_passive(SEXP phiSEXP, SEXP thetaSEXP, SEXP psiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type psi(psiSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_euler_passive(phi, theta, psi));
    return rcpp_result_gen;
END_RCPP
}
// cpp_axis_rotation
arma::mat cpp_axis_rotation(const double angle, const int axis);
RcppExport SEXP tmatrix_cpp_axis_rotation(SEXP angleSEXP, SEXP axisSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type angle(angleSEXP);
    Rcpp::traits::input_parameter< const int >::type axis(axisSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_axis_rotation(angle, axis));
    return rcpp_result_gen;
END_RCPP
}
// cpp_ssh
arma::cx_mat cpp_ssh(const double phi, const double theta, const double psi);
RcppExport SEXP tmatrix_cpp_ssh(SEXP phiSEXP, SEXP thetaSEXP, SEXP psiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type psi(psiSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_ssh(phi, theta, psi));
    return rcpp_result_gen;
END_RCPP
}
// cpp_vsh
arma::cx_mat cpp_vsh(const double phi, const double theta, const double psi);
RcppExport SEXP tmatrix_cpp_vsh(SEXP phiSEXP, SEXP thetaSEXP, SEXP psiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type psi(psiSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_vsh(phi, theta, psi));
    return rcpp_result_gen;
END_RCPP
}
// cpp_vswf
arma::cx_mat cpp_vswf(const double phi, const double theta, const double psi);
RcppExport SEXP tmatrix_cpp_vswf(SEXP phiSEXP, SEXP thetaSEXP, SEXP psiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type psi(psiSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_vswf(phi, theta, psi));
    return rcpp_result_gen;
END_RCPP
}
